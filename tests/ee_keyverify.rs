use webpki::{EndEntityCert, Error};

// DO NOT EDIT BELOW: generated by tests/generate.py

#[cfg(feature = "alloc")]
#[test]
fn rsa_2048_pkcs8() {
    let ee = include_bytes!("ee_keyverify/rsa_2048_pkcs8.cert.der");
    let ee = EndEntityCert::try_from(ee.as_ref()).unwrap();
    let privkey = include_bytes!("ee_keyverify/rsa_2048_pkcs8.key.der");

    let rsa_3072_pkcs8 = include_bytes!("ee_keyverify/rsa_3072_pkcs8.key.der");
    let rsa_4096_pkcs8 = include_bytes!("ee_keyverify/rsa_4096_pkcs8.key.der");
    let rsa_2048_pkcs1 = include_bytes!("ee_keyverify/rsa_2048_pkcs1.key.der");
    let rsa_3072_pkcs1 = include_bytes!("ee_keyverify/rsa_3072_pkcs1.key.der");
    let rsa_4096_pkcs1 = include_bytes!("ee_keyverify/rsa_4096_pkcs1.key.der");
    let ec_p256_pkcs8 = include_bytes!("ee_keyverify/ec_p256_pkcs8.key.der");
    let ec_p384_pkcs8 = include_bytes!("ee_keyverify/ec_p384_pkcs8.key.der");
    let ec_p256_sec1 = include_bytes!("ee_keyverify/ec_p256_sec1.key.der");
    let ec_p384_sec1 = include_bytes!("ee_keyverify/ec_p384_sec1.key.der");
    let ed25519_pkcs8 = include_bytes!("ee_keyverify/ed25519_pkcs8.key.der");

    assert!(ee.verify_private_key(privkey.as_ref()).is_ok());
    assert!(matches!(
        ee.verify_private_key(rsa_3072_pkcs8.as_ref()),
        Err(Error::CertPrivateKeyMismatch)
    ));
    assert!(matches!(
        ee.verify_private_key(rsa_4096_pkcs8.as_ref()),
        Err(Error::CertPrivateKeyMismatch)
    ));
    assert!(matches!(
        ee.verify_private_key(rsa_2048_pkcs1.as_ref()),
        Err(Error::CertPrivateKeyMismatch)
    ));
    assert!(matches!(
        ee.verify_private_key(rsa_3072_pkcs1.as_ref()),
        Err(Error::CertPrivateKeyMismatch)
    ));
    assert!(matches!(
        ee.verify_private_key(rsa_4096_pkcs1.as_ref()),
        Err(Error::CertPrivateKeyMismatch)
    ));
    assert!(matches!(
        ee.verify_private_key(ec_p256_pkcs8.as_ref()),
        Err(Error::CertPrivateKeyMismatch)
    ));
    assert!(matches!(
        ee.verify_private_key(ec_p384_pkcs8.as_ref()),
        Err(Error::CertPrivateKeyMismatch)
    ));
    assert!(matches!(
        ee.verify_private_key(ec_p256_sec1.as_ref()),
        Err(Error::CertPrivateKeyMismatch)
    ));
    assert!(matches!(
        ee.verify_private_key(ec_p384_sec1.as_ref()),
        Err(Error::CertPrivateKeyMismatch)
    ));
    assert!(matches!(
        ee.verify_private_key(ed25519_pkcs8.as_ref()),
        Err(Error::CertPrivateKeyMismatch)
    ));
}

#[cfg(feature = "alloc")]
#[test]
fn rsa_3072_pkcs8() {
    let ee = include_bytes!("ee_keyverify/rsa_3072_pkcs8.cert.der");
    let ee = EndEntityCert::try_from(ee.as_ref()).unwrap();
    let privkey = include_bytes!("ee_keyverify/rsa_3072_pkcs8.key.der");

    let rsa_2048_pkcs8 = include_bytes!("ee_keyverify/rsa_2048_pkcs8.key.der");
    let rsa_4096_pkcs8 = include_bytes!("ee_keyverify/rsa_4096_pkcs8.key.der");
    let rsa_2048_pkcs1 = include_bytes!("ee_keyverify/rsa_2048_pkcs1.key.der");
    let rsa_3072_pkcs1 = include_bytes!("ee_keyverify/rsa_3072_pkcs1.key.der");
    let rsa_4096_pkcs1 = include_bytes!("ee_keyverify/rsa_4096_pkcs1.key.der");
    let ec_p256_pkcs8 = include_bytes!("ee_keyverify/ec_p256_pkcs8.key.der");
    let ec_p384_pkcs8 = include_bytes!("ee_keyverify/ec_p384_pkcs8.key.der");
    let ec_p256_sec1 = include_bytes!("ee_keyverify/ec_p256_sec1.key.der");
    let ec_p384_sec1 = include_bytes!("ee_keyverify/ec_p384_sec1.key.der");
    let ed25519_pkcs8 = include_bytes!("ee_keyverify/ed25519_pkcs8.key.der");

    assert!(ee.verify_private_key(privkey.as_ref()).is_ok());
    assert!(matches!(
        ee.verify_private_key(rsa_2048_pkcs8.as_ref()),
        Err(Error::CertPrivateKeyMismatch)
    ));
    assert!(matches!(
        ee.verify_private_key(rsa_4096_pkcs8.as_ref()),
        Err(Error::CertPrivateKeyMismatch)
    ));
    assert!(matches!(
        ee.verify_private_key(rsa_2048_pkcs1.as_ref()),
        Err(Error::CertPrivateKeyMismatch)
    ));
    assert!(matches!(
        ee.verify_private_key(rsa_3072_pkcs1.as_ref()),
        Err(Error::CertPrivateKeyMismatch)
    ));
    assert!(matches!(
        ee.verify_private_key(rsa_4096_pkcs1.as_ref()),
        Err(Error::CertPrivateKeyMismatch)
    ));
    assert!(matches!(
        ee.verify_private_key(ec_p256_pkcs8.as_ref()),
        Err(Error::CertPrivateKeyMismatch)
    ));
    assert!(matches!(
        ee.verify_private_key(ec_p384_pkcs8.as_ref()),
        Err(Error::CertPrivateKeyMismatch)
    ));
    assert!(matches!(
        ee.verify_private_key(ec_p256_sec1.as_ref()),
        Err(Error::CertPrivateKeyMismatch)
    ));
    assert!(matches!(
        ee.verify_private_key(ec_p384_sec1.as_ref()),
        Err(Error::CertPrivateKeyMismatch)
    ));
    assert!(matches!(
        ee.verify_private_key(ed25519_pkcs8.as_ref()),
        Err(Error::CertPrivateKeyMismatch)
    ));
}

#[cfg(feature = "alloc")]
#[test]
fn rsa_4096_pkcs8() {
    let ee = include_bytes!("ee_keyverify/rsa_4096_pkcs8.cert.der");
    let ee = EndEntityCert::try_from(ee.as_ref()).unwrap();
    let privkey = include_bytes!("ee_keyverify/rsa_4096_pkcs8.key.der");

    let rsa_2048_pkcs8 = include_bytes!("ee_keyverify/rsa_2048_pkcs8.key.der");
    let rsa_3072_pkcs8 = include_bytes!("ee_keyverify/rsa_3072_pkcs8.key.der");
    let rsa_2048_pkcs1 = include_bytes!("ee_keyverify/rsa_2048_pkcs1.key.der");
    let rsa_3072_pkcs1 = include_bytes!("ee_keyverify/rsa_3072_pkcs1.key.der");
    let rsa_4096_pkcs1 = include_bytes!("ee_keyverify/rsa_4096_pkcs1.key.der");
    let ec_p256_pkcs8 = include_bytes!("ee_keyverify/ec_p256_pkcs8.key.der");
    let ec_p384_pkcs8 = include_bytes!("ee_keyverify/ec_p384_pkcs8.key.der");
    let ec_p256_sec1 = include_bytes!("ee_keyverify/ec_p256_sec1.key.der");
    let ec_p384_sec1 = include_bytes!("ee_keyverify/ec_p384_sec1.key.der");
    let ed25519_pkcs8 = include_bytes!("ee_keyverify/ed25519_pkcs8.key.der");

    assert!(ee.verify_private_key(privkey.as_ref()).is_ok());
    assert!(matches!(
        ee.verify_private_key(rsa_2048_pkcs8.as_ref()),
        Err(Error::CertPrivateKeyMismatch)
    ));
    assert!(matches!(
        ee.verify_private_key(rsa_3072_pkcs8.as_ref()),
        Err(Error::CertPrivateKeyMismatch)
    ));
    assert!(matches!(
        ee.verify_private_key(rsa_2048_pkcs1.as_ref()),
        Err(Error::CertPrivateKeyMismatch)
    ));
    assert!(matches!(
        ee.verify_private_key(rsa_3072_pkcs1.as_ref()),
        Err(Error::CertPrivateKeyMismatch)
    ));
    assert!(matches!(
        ee.verify_private_key(rsa_4096_pkcs1.as_ref()),
        Err(Error::CertPrivateKeyMismatch)
    ));
    assert!(matches!(
        ee.verify_private_key(ec_p256_pkcs8.as_ref()),
        Err(Error::CertPrivateKeyMismatch)
    ));
    assert!(matches!(
        ee.verify_private_key(ec_p384_pkcs8.as_ref()),
        Err(Error::CertPrivateKeyMismatch)
    ));
    assert!(matches!(
        ee.verify_private_key(ec_p256_sec1.as_ref()),
        Err(Error::CertPrivateKeyMismatch)
    ));
    assert!(matches!(
        ee.verify_private_key(ec_p384_sec1.as_ref()),
        Err(Error::CertPrivateKeyMismatch)
    ));
    assert!(matches!(
        ee.verify_private_key(ed25519_pkcs8.as_ref()),
        Err(Error::CertPrivateKeyMismatch)
    ));
}

#[cfg(feature = "alloc")]
#[test]
fn rsa_2048_pkcs1() {
    let ee = include_bytes!("ee_keyverify/rsa_2048_pkcs1.cert.der");
    let ee = EndEntityCert::try_from(ee.as_ref()).unwrap();
    let privkey = include_bytes!("ee_keyverify/rsa_2048_pkcs1.key.der");

    let rsa_2048_pkcs8 = include_bytes!("ee_keyverify/rsa_2048_pkcs8.key.der");
    let rsa_3072_pkcs8 = include_bytes!("ee_keyverify/rsa_3072_pkcs8.key.der");
    let rsa_4096_pkcs8 = include_bytes!("ee_keyverify/rsa_4096_pkcs8.key.der");
    let rsa_3072_pkcs1 = include_bytes!("ee_keyverify/rsa_3072_pkcs1.key.der");
    let rsa_4096_pkcs1 = include_bytes!("ee_keyverify/rsa_4096_pkcs1.key.der");
    let ec_p256_pkcs8 = include_bytes!("ee_keyverify/ec_p256_pkcs8.key.der");
    let ec_p384_pkcs8 = include_bytes!("ee_keyverify/ec_p384_pkcs8.key.der");
    let ec_p256_sec1 = include_bytes!("ee_keyverify/ec_p256_sec1.key.der");
    let ec_p384_sec1 = include_bytes!("ee_keyverify/ec_p384_sec1.key.der");
    let ed25519_pkcs8 = include_bytes!("ee_keyverify/ed25519_pkcs8.key.der");

    assert!(ee.verify_private_key(privkey.as_ref()).is_ok());
    assert!(matches!(
        ee.verify_private_key(rsa_2048_pkcs8.as_ref()),
        Err(Error::CertPrivateKeyMismatch)
    ));
    assert!(matches!(
        ee.verify_private_key(rsa_3072_pkcs8.as_ref()),
        Err(Error::CertPrivateKeyMismatch)
    ));
    assert!(matches!(
        ee.verify_private_key(rsa_4096_pkcs8.as_ref()),
        Err(Error::CertPrivateKeyMismatch)
    ));
    assert!(matches!(
        ee.verify_private_key(rsa_3072_pkcs1.as_ref()),
        Err(Error::CertPrivateKeyMismatch)
    ));
    assert!(matches!(
        ee.verify_private_key(rsa_4096_pkcs1.as_ref()),
        Err(Error::CertPrivateKeyMismatch)
    ));
    assert!(matches!(
        ee.verify_private_key(ec_p256_pkcs8.as_ref()),
        Err(Error::CertPrivateKeyMismatch)
    ));
    assert!(matches!(
        ee.verify_private_key(ec_p384_pkcs8.as_ref()),
        Err(Error::CertPrivateKeyMismatch)
    ));
    assert!(matches!(
        ee.verify_private_key(ec_p256_sec1.as_ref()),
        Err(Error::CertPrivateKeyMismatch)
    ));
    assert!(matches!(
        ee.verify_private_key(ec_p384_sec1.as_ref()),
        Err(Error::CertPrivateKeyMismatch)
    ));
    assert!(matches!(
        ee.verify_private_key(ed25519_pkcs8.as_ref()),
        Err(Error::CertPrivateKeyMismatch)
    ));
}

#[cfg(feature = "alloc")]
#[test]
fn rsa_3072_pkcs1() {
    let ee = include_bytes!("ee_keyverify/rsa_3072_pkcs1.cert.der");
    let ee = EndEntityCert::try_from(ee.as_ref()).unwrap();
    let privkey = include_bytes!("ee_keyverify/rsa_3072_pkcs1.key.der");

    let rsa_2048_pkcs8 = include_bytes!("ee_keyverify/rsa_2048_pkcs8.key.der");
    let rsa_3072_pkcs8 = include_bytes!("ee_keyverify/rsa_3072_pkcs8.key.der");
    let rsa_4096_pkcs8 = include_bytes!("ee_keyverify/rsa_4096_pkcs8.key.der");
    let rsa_2048_pkcs1 = include_bytes!("ee_keyverify/rsa_2048_pkcs1.key.der");
    let rsa_4096_pkcs1 = include_bytes!("ee_keyverify/rsa_4096_pkcs1.key.der");
    let ec_p256_pkcs8 = include_bytes!("ee_keyverify/ec_p256_pkcs8.key.der");
    let ec_p384_pkcs8 = include_bytes!("ee_keyverify/ec_p384_pkcs8.key.der");
    let ec_p256_sec1 = include_bytes!("ee_keyverify/ec_p256_sec1.key.der");
    let ec_p384_sec1 = include_bytes!("ee_keyverify/ec_p384_sec1.key.der");
    let ed25519_pkcs8 = include_bytes!("ee_keyverify/ed25519_pkcs8.key.der");

    assert!(ee.verify_private_key(privkey.as_ref()).is_ok());
    assert!(matches!(
        ee.verify_private_key(rsa_2048_pkcs8.as_ref()),
        Err(Error::CertPrivateKeyMismatch)
    ));
    assert!(matches!(
        ee.verify_private_key(rsa_3072_pkcs8.as_ref()),
        Err(Error::CertPrivateKeyMismatch)
    ));
    assert!(matches!(
        ee.verify_private_key(rsa_4096_pkcs8.as_ref()),
        Err(Error::CertPrivateKeyMismatch)
    ));
    assert!(matches!(
        ee.verify_private_key(rsa_2048_pkcs1.as_ref()),
        Err(Error::CertPrivateKeyMismatch)
    ));
    assert!(matches!(
        ee.verify_private_key(rsa_4096_pkcs1.as_ref()),
        Err(Error::CertPrivateKeyMismatch)
    ));
    assert!(matches!(
        ee.verify_private_key(ec_p256_pkcs8.as_ref()),
        Err(Error::CertPrivateKeyMismatch)
    ));
    assert!(matches!(
        ee.verify_private_key(ec_p384_pkcs8.as_ref()),
        Err(Error::CertPrivateKeyMismatch)
    ));
    assert!(matches!(
        ee.verify_private_key(ec_p256_sec1.as_ref()),
        Err(Error::CertPrivateKeyMismatch)
    ));
    assert!(matches!(
        ee.verify_private_key(ec_p384_sec1.as_ref()),
        Err(Error::CertPrivateKeyMismatch)
    ));
    assert!(matches!(
        ee.verify_private_key(ed25519_pkcs8.as_ref()),
        Err(Error::CertPrivateKeyMismatch)
    ));
}

#[cfg(feature = "alloc")]
#[test]
fn rsa_4096_pkcs1() {
    let ee = include_bytes!("ee_keyverify/rsa_4096_pkcs1.cert.der");
    let ee = EndEntityCert::try_from(ee.as_ref()).unwrap();
    let privkey = include_bytes!("ee_keyverify/rsa_4096_pkcs1.key.der");

    let rsa_2048_pkcs8 = include_bytes!("ee_keyverify/rsa_2048_pkcs8.key.der");
    let rsa_3072_pkcs8 = include_bytes!("ee_keyverify/rsa_3072_pkcs8.key.der");
    let rsa_4096_pkcs8 = include_bytes!("ee_keyverify/rsa_4096_pkcs8.key.der");
    let rsa_2048_pkcs1 = include_bytes!("ee_keyverify/rsa_2048_pkcs1.key.der");
    let rsa_3072_pkcs1 = include_bytes!("ee_keyverify/rsa_3072_pkcs1.key.der");
    let ec_p256_pkcs8 = include_bytes!("ee_keyverify/ec_p256_pkcs8.key.der");
    let ec_p384_pkcs8 = include_bytes!("ee_keyverify/ec_p384_pkcs8.key.der");
    let ec_p256_sec1 = include_bytes!("ee_keyverify/ec_p256_sec1.key.der");
    let ec_p384_sec1 = include_bytes!("ee_keyverify/ec_p384_sec1.key.der");
    let ed25519_pkcs8 = include_bytes!("ee_keyverify/ed25519_pkcs8.key.der");

    assert!(ee.verify_private_key(privkey.as_ref()).is_ok());
    assert!(matches!(
        ee.verify_private_key(rsa_2048_pkcs8.as_ref()),
        Err(Error::CertPrivateKeyMismatch)
    ));
    assert!(matches!(
        ee.verify_private_key(rsa_3072_pkcs8.as_ref()),
        Err(Error::CertPrivateKeyMismatch)
    ));
    assert!(matches!(
        ee.verify_private_key(rsa_4096_pkcs8.as_ref()),
        Err(Error::CertPrivateKeyMismatch)
    ));
    assert!(matches!(
        ee.verify_private_key(rsa_2048_pkcs1.as_ref()),
        Err(Error::CertPrivateKeyMismatch)
    ));
    assert!(matches!(
        ee.verify_private_key(rsa_3072_pkcs1.as_ref()),
        Err(Error::CertPrivateKeyMismatch)
    ));
    assert!(matches!(
        ee.verify_private_key(ec_p256_pkcs8.as_ref()),
        Err(Error::CertPrivateKeyMismatch)
    ));
    assert!(matches!(
        ee.verify_private_key(ec_p384_pkcs8.as_ref()),
        Err(Error::CertPrivateKeyMismatch)
    ));
    assert!(matches!(
        ee.verify_private_key(ec_p256_sec1.as_ref()),
        Err(Error::CertPrivateKeyMismatch)
    ));
    assert!(matches!(
        ee.verify_private_key(ec_p384_sec1.as_ref()),
        Err(Error::CertPrivateKeyMismatch)
    ));
    assert!(matches!(
        ee.verify_private_key(ed25519_pkcs8.as_ref()),
        Err(Error::CertPrivateKeyMismatch)
    ));
}

#[test]
fn ec_p256_pkcs8() {
    let ee = include_bytes!("ee_keyverify/ec_p256_pkcs8.cert.der");
    let ee = EndEntityCert::try_from(ee.as_ref()).unwrap();
    let privkey = include_bytes!("ee_keyverify/ec_p256_pkcs8.key.der");

    let rsa_2048_pkcs8 = include_bytes!("ee_keyverify/rsa_2048_pkcs8.key.der");
    let rsa_3072_pkcs8 = include_bytes!("ee_keyverify/rsa_3072_pkcs8.key.der");
    let rsa_4096_pkcs8 = include_bytes!("ee_keyverify/rsa_4096_pkcs8.key.der");
    let rsa_2048_pkcs1 = include_bytes!("ee_keyverify/rsa_2048_pkcs1.key.der");
    let rsa_3072_pkcs1 = include_bytes!("ee_keyverify/rsa_3072_pkcs1.key.der");
    let rsa_4096_pkcs1 = include_bytes!("ee_keyverify/rsa_4096_pkcs1.key.der");
    let ec_p384_pkcs8 = include_bytes!("ee_keyverify/ec_p384_pkcs8.key.der");
    let ec_p256_sec1 = include_bytes!("ee_keyverify/ec_p256_sec1.key.der");
    let ec_p384_sec1 = include_bytes!("ee_keyverify/ec_p384_sec1.key.der");
    let ed25519_pkcs8 = include_bytes!("ee_keyverify/ed25519_pkcs8.key.der");

    assert!(ee.verify_private_key(privkey.as_ref()).is_ok());
    assert!(matches!(
        ee.verify_private_key(rsa_2048_pkcs8.as_ref()),
        Err(Error::CertPrivateKeyMismatch)
    ));
    assert!(matches!(
        ee.verify_private_key(rsa_3072_pkcs8.as_ref()),
        Err(Error::CertPrivateKeyMismatch)
    ));
    assert!(matches!(
        ee.verify_private_key(rsa_4096_pkcs8.as_ref()),
        Err(Error::CertPrivateKeyMismatch)
    ));
    assert!(matches!(
        ee.verify_private_key(rsa_2048_pkcs1.as_ref()),
        Err(Error::CertPrivateKeyMismatch)
    ));
    assert!(matches!(
        ee.verify_private_key(rsa_3072_pkcs1.as_ref()),
        Err(Error::CertPrivateKeyMismatch)
    ));
    assert!(matches!(
        ee.verify_private_key(rsa_4096_pkcs1.as_ref()),
        Err(Error::CertPrivateKeyMismatch)
    ));
    assert!(matches!(
        ee.verify_private_key(ec_p384_pkcs8.as_ref()),
        Err(Error::CertPrivateKeyMismatch)
    ));
    assert!(matches!(
        ee.verify_private_key(ec_p256_sec1.as_ref()),
        Err(Error::CertPrivateKeyMismatch)
    ));
    assert!(matches!(
        ee.verify_private_key(ec_p384_sec1.as_ref()),
        Err(Error::CertPrivateKeyMismatch)
    ));
    assert!(matches!(
        ee.verify_private_key(ed25519_pkcs8.as_ref()),
        Err(Error::CertPrivateKeyMismatch)
    ));
}

#[test]
fn ec_p384_pkcs8() {
    let ee = include_bytes!("ee_keyverify/ec_p384_pkcs8.cert.der");
    let ee = EndEntityCert::try_from(ee.as_ref()).unwrap();
    let privkey = include_bytes!("ee_keyverify/ec_p384_pkcs8.key.der");

    let rsa_2048_pkcs8 = include_bytes!("ee_keyverify/rsa_2048_pkcs8.key.der");
    let rsa_3072_pkcs8 = include_bytes!("ee_keyverify/rsa_3072_pkcs8.key.der");
    let rsa_4096_pkcs8 = include_bytes!("ee_keyverify/rsa_4096_pkcs8.key.der");
    let rsa_2048_pkcs1 = include_bytes!("ee_keyverify/rsa_2048_pkcs1.key.der");
    let rsa_3072_pkcs1 = include_bytes!("ee_keyverify/rsa_3072_pkcs1.key.der");
    let rsa_4096_pkcs1 = include_bytes!("ee_keyverify/rsa_4096_pkcs1.key.der");
    let ec_p256_pkcs8 = include_bytes!("ee_keyverify/ec_p256_pkcs8.key.der");
    let ec_p256_sec1 = include_bytes!("ee_keyverify/ec_p256_sec1.key.der");
    let ec_p384_sec1 = include_bytes!("ee_keyverify/ec_p384_sec1.key.der");
    let ed25519_pkcs8 = include_bytes!("ee_keyverify/ed25519_pkcs8.key.der");

    assert!(ee.verify_private_key(privkey.as_ref()).is_ok());
    assert!(matches!(
        ee.verify_private_key(rsa_2048_pkcs8.as_ref()),
        Err(Error::CertPrivateKeyMismatch)
    ));
    assert!(matches!(
        ee.verify_private_key(rsa_3072_pkcs8.as_ref()),
        Err(Error::CertPrivateKeyMismatch)
    ));
    assert!(matches!(
        ee.verify_private_key(rsa_4096_pkcs8.as_ref()),
        Err(Error::CertPrivateKeyMismatch)
    ));
    assert!(matches!(
        ee.verify_private_key(rsa_2048_pkcs1.as_ref()),
        Err(Error::CertPrivateKeyMismatch)
    ));
    assert!(matches!(
        ee.verify_private_key(rsa_3072_pkcs1.as_ref()),
        Err(Error::CertPrivateKeyMismatch)
    ));
    assert!(matches!(
        ee.verify_private_key(rsa_4096_pkcs1.as_ref()),
        Err(Error::CertPrivateKeyMismatch)
    ));
    assert!(matches!(
        ee.verify_private_key(ec_p256_pkcs8.as_ref()),
        Err(Error::CertPrivateKeyMismatch)
    ));
    assert!(matches!(
        ee.verify_private_key(ec_p256_sec1.as_ref()),
        Err(Error::CertPrivateKeyMismatch)
    ));
    assert!(matches!(
        ee.verify_private_key(ec_p384_sec1.as_ref()),
        Err(Error::CertPrivateKeyMismatch)
    ));
    assert!(matches!(
        ee.verify_private_key(ed25519_pkcs8.as_ref()),
        Err(Error::CertPrivateKeyMismatch)
    ));
}

#[cfg(feature = "alloc")]
#[test]
fn ec_p256_sec1() {
    let ee = include_bytes!("ee_keyverify/ec_p256_sec1.cert.der");
    let ee = EndEntityCert::try_from(ee.as_ref()).unwrap();
    let privkey = include_bytes!("ee_keyverify/ec_p256_sec1.key.der");

    let rsa_2048_pkcs8 = include_bytes!("ee_keyverify/rsa_2048_pkcs8.key.der");
    let rsa_3072_pkcs8 = include_bytes!("ee_keyverify/rsa_3072_pkcs8.key.der");
    let rsa_4096_pkcs8 = include_bytes!("ee_keyverify/rsa_4096_pkcs8.key.der");
    let rsa_2048_pkcs1 = include_bytes!("ee_keyverify/rsa_2048_pkcs1.key.der");
    let rsa_3072_pkcs1 = include_bytes!("ee_keyverify/rsa_3072_pkcs1.key.der");
    let rsa_4096_pkcs1 = include_bytes!("ee_keyverify/rsa_4096_pkcs1.key.der");
    let ec_p256_pkcs8 = include_bytes!("ee_keyverify/ec_p256_pkcs8.key.der");
    let ec_p384_pkcs8 = include_bytes!("ee_keyverify/ec_p384_pkcs8.key.der");
    let ec_p384_sec1 = include_bytes!("ee_keyverify/ec_p384_sec1.key.der");
    let ed25519_pkcs8 = include_bytes!("ee_keyverify/ed25519_pkcs8.key.der");

    assert!(ee.verify_private_key(privkey.as_ref()).is_ok());
    assert!(matches!(
        ee.verify_private_key(rsa_2048_pkcs8.as_ref()),
        Err(Error::CertPrivateKeyMismatch)
    ));
    assert!(matches!(
        ee.verify_private_key(rsa_3072_pkcs8.as_ref()),
        Err(Error::CertPrivateKeyMismatch)
    ));
    assert!(matches!(
        ee.verify_private_key(rsa_4096_pkcs8.as_ref()),
        Err(Error::CertPrivateKeyMismatch)
    ));
    assert!(matches!(
        ee.verify_private_key(rsa_2048_pkcs1.as_ref()),
        Err(Error::CertPrivateKeyMismatch)
    ));
    assert!(matches!(
        ee.verify_private_key(rsa_3072_pkcs1.as_ref()),
        Err(Error::CertPrivateKeyMismatch)
    ));
    assert!(matches!(
        ee.verify_private_key(rsa_4096_pkcs1.as_ref()),
        Err(Error::CertPrivateKeyMismatch)
    ));
    assert!(matches!(
        ee.verify_private_key(ec_p256_pkcs8.as_ref()),
        Err(Error::CertPrivateKeyMismatch)
    ));
    assert!(matches!(
        ee.verify_private_key(ec_p384_pkcs8.as_ref()),
        Err(Error::CertPrivateKeyMismatch)
    ));
    assert!(matches!(
        ee.verify_private_key(ec_p384_sec1.as_ref()),
        Err(Error::CertPrivateKeyMismatch)
    ));
    assert!(matches!(
        ee.verify_private_key(ed25519_pkcs8.as_ref()),
        Err(Error::CertPrivateKeyMismatch)
    ));
}

#[cfg(feature = "alloc")]
#[test]
fn ec_p384_sec1() {
    let ee = include_bytes!("ee_keyverify/ec_p384_sec1.cert.der");
    let ee = EndEntityCert::try_from(ee.as_ref()).unwrap();
    let privkey = include_bytes!("ee_keyverify/ec_p384_sec1.key.der");

    let rsa_2048_pkcs8 = include_bytes!("ee_keyverify/rsa_2048_pkcs8.key.der");
    let rsa_3072_pkcs8 = include_bytes!("ee_keyverify/rsa_3072_pkcs8.key.der");
    let rsa_4096_pkcs8 = include_bytes!("ee_keyverify/rsa_4096_pkcs8.key.der");
    let rsa_2048_pkcs1 = include_bytes!("ee_keyverify/rsa_2048_pkcs1.key.der");
    let rsa_3072_pkcs1 = include_bytes!("ee_keyverify/rsa_3072_pkcs1.key.der");
    let rsa_4096_pkcs1 = include_bytes!("ee_keyverify/rsa_4096_pkcs1.key.der");
    let ec_p256_pkcs8 = include_bytes!("ee_keyverify/ec_p256_pkcs8.key.der");
    let ec_p384_pkcs8 = include_bytes!("ee_keyverify/ec_p384_pkcs8.key.der");
    let ec_p256_sec1 = include_bytes!("ee_keyverify/ec_p256_sec1.key.der");
    let ed25519_pkcs8 = include_bytes!("ee_keyverify/ed25519_pkcs8.key.der");

    assert!(ee.verify_private_key(privkey.as_ref()).is_ok());
    assert!(matches!(
        ee.verify_private_key(rsa_2048_pkcs8.as_ref()),
        Err(Error::CertPrivateKeyMismatch)
    ));
    assert!(matches!(
        ee.verify_private_key(rsa_3072_pkcs8.as_ref()),
        Err(Error::CertPrivateKeyMismatch)
    ));
    assert!(matches!(
        ee.verify_private_key(rsa_4096_pkcs8.as_ref()),
        Err(Error::CertPrivateKeyMismatch)
    ));
    assert!(matches!(
        ee.verify_private_key(rsa_2048_pkcs1.as_ref()),
        Err(Error::CertPrivateKeyMismatch)
    ));
    assert!(matches!(
        ee.verify_private_key(rsa_3072_pkcs1.as_ref()),
        Err(Error::CertPrivateKeyMismatch)
    ));
    assert!(matches!(
        ee.verify_private_key(rsa_4096_pkcs1.as_ref()),
        Err(Error::CertPrivateKeyMismatch)
    ));
    assert!(matches!(
        ee.verify_private_key(ec_p256_pkcs8.as_ref()),
        Err(Error::CertPrivateKeyMismatch)
    ));
    assert!(matches!(
        ee.verify_private_key(ec_p384_pkcs8.as_ref()),
        Err(Error::CertPrivateKeyMismatch)
    ));
    assert!(matches!(
        ee.verify_private_key(ec_p256_sec1.as_ref()),
        Err(Error::CertPrivateKeyMismatch)
    ));
    assert!(matches!(
        ee.verify_private_key(ed25519_pkcs8.as_ref()),
        Err(Error::CertPrivateKeyMismatch)
    ));
}

#[test]
fn ed25519_pkcs8() {
    let ee = include_bytes!("ee_keyverify/ed25519_pkcs8.cert.der");
    let ee = EndEntityCert::try_from(ee.as_ref()).unwrap();
    let privkey = include_bytes!("ee_keyverify/ed25519_pkcs8.key.der");

    let rsa_2048_pkcs8 = include_bytes!("ee_keyverify/rsa_2048_pkcs8.key.der");
    let rsa_3072_pkcs8 = include_bytes!("ee_keyverify/rsa_3072_pkcs8.key.der");
    let rsa_4096_pkcs8 = include_bytes!("ee_keyverify/rsa_4096_pkcs8.key.der");
    let rsa_2048_pkcs1 = include_bytes!("ee_keyverify/rsa_2048_pkcs1.key.der");
    let rsa_3072_pkcs1 = include_bytes!("ee_keyverify/rsa_3072_pkcs1.key.der");
    let rsa_4096_pkcs1 = include_bytes!("ee_keyverify/rsa_4096_pkcs1.key.der");
    let ec_p256_pkcs8 = include_bytes!("ee_keyverify/ec_p256_pkcs8.key.der");
    let ec_p384_pkcs8 = include_bytes!("ee_keyverify/ec_p384_pkcs8.key.der");
    let ec_p256_sec1 = include_bytes!("ee_keyverify/ec_p256_sec1.key.der");
    let ec_p384_sec1 = include_bytes!("ee_keyverify/ec_p384_sec1.key.der");

    assert!(ee.verify_private_key(privkey.as_ref()).is_ok());
    assert!(matches!(
        ee.verify_private_key(rsa_2048_pkcs8.as_ref()),
        Err(Error::CertPrivateKeyMismatch)
    ));
    assert!(matches!(
        ee.verify_private_key(rsa_3072_pkcs8.as_ref()),
        Err(Error::CertPrivateKeyMismatch)
    ));
    assert!(matches!(
        ee.verify_private_key(rsa_4096_pkcs8.as_ref()),
        Err(Error::CertPrivateKeyMismatch)
    ));
    assert!(matches!(
        ee.verify_private_key(rsa_2048_pkcs1.as_ref()),
        Err(Error::CertPrivateKeyMismatch)
    ));
    assert!(matches!(
        ee.verify_private_key(rsa_3072_pkcs1.as_ref()),
        Err(Error::CertPrivateKeyMismatch)
    ));
    assert!(matches!(
        ee.verify_private_key(rsa_4096_pkcs1.as_ref()),
        Err(Error::CertPrivateKeyMismatch)
    ));
    assert!(matches!(
        ee.verify_private_key(ec_p256_pkcs8.as_ref()),
        Err(Error::CertPrivateKeyMismatch)
    ));
    assert!(matches!(
        ee.verify_private_key(ec_p384_pkcs8.as_ref()),
        Err(Error::CertPrivateKeyMismatch)
    ));
    assert!(matches!(
        ee.verify_private_key(ec_p256_sec1.as_ref()),
        Err(Error::CertPrivateKeyMismatch)
    ));
    assert!(matches!(
        ee.verify_private_key(ec_p384_sec1.as_ref()),
        Err(Error::CertPrivateKeyMismatch)
    ));
}
